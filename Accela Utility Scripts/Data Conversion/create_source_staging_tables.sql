/*
SCRIPT: 01_CREATE_TABLES.SQL
AUTHOR: DANE QUATACKER, ACCELA INC.
DATE: 11/22/2011
DESCRIPTION: CREATES BASE TABLES FOR STANDARD MAP CONVERSION IN AN SQL SERVER DATABASE

UPDATES
11/13/2012 - DQ - ADDED 7.2. FP2 UPDATES

*/
IF EXISTS (SELECT * FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME = N'AATABLE_PERMIT_ACTIVITY')
BEGIN
DROP TABLE AATABLE_PERMIT_ACTIVITY
END
go
CREATE TABLE AATABLE_PERMIT_ACTIVITY
(
  PERMITNUM          VARCHAR(30)          NOT NULL,
  ACT_NAME           VARCHAR(30)          NOT NULL,
  ACT_DES            VARCHAR(4000),
  ACT_TYPE           VARCHAR(255)         NOT NULL,
  ACT_DATE           DATETIME                       NOT NULL,
  ACT_DEPT           VARCHAR(100),
  ACT_STAF           VARCHAR(50),
  REC_DATE           DATETIME,
  REC_FUL_NAM        VARCHAR(70),
  INTERNAL_USE_ONLY  VARCHAR(1)           NOT NULL,
  ACT_DUE_DATE DATETIME,
  ACT_PRIORITY VARCHAR(30),
  ACT_STATUS VARCHAR(30) default 'Completed' 
)
go

IF EXISTS (SELECT * FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME = N'AATABLE_PERMIT_ADDRESS')
BEGIN
DROP TABLE AATABLE_PERMIT_ADDRESS
END
go
CREATE TABLE AATABLE_PERMIT_ADDRESS
(
  PERMITNUM           VARCHAR(30)         NOT NULL,
  ISPRIMARY           VARCHAR(1),
  STR_NUM_START       NUMERIC(9),
  STR_NUM_END         NUMERIC(9),
  STR_FRAC_START      VARCHAR(20),
  STR_FRAC_END        VARCHAR(20),
  STR_DIR             VARCHAR(20),
  STR_NAME            VARCHAR(40),
  STR_SUFFIX          VARCHAR(30),
  STR_SUFFIX_DIR      VARCHAR(20),
  STR_PREFIX 		  VARCHAR(20),
  STR_UNIT_START      VARCHAR(10),
  STR_UNIT_END        VARCHAR(10),
  STR_UNIT_TYPE       VARCHAR(20),
  SITUS_CITY          VARCHAR(40),
  SITUS_STATE         VARCHAR(30),
  SITUS_ZIP           VARCHAR(10),
  SITUS_COUNTY        VARCHAR(30),
  SITUS_COUNTRY       VARCHAR(30),
  SITUS_COUNTRY_CODE  VARCHAR(2),
  X_COORD             NUMERIC(20,8),
  Y_COORD             NUMERIC(20,8),
  ADDR_DESC           VARCHAR(255),
  FULL_ADDRESS        VARCHAR(600)		NOT NULL,
  ADDRESS1            VARCHAR(200),
  ADDRESS2            VARCHAR(200),
  SITUS_NBRHD         VARCHAR(30),
  EXT_ADDRESS_UID	  VARCHAR(100),
  STREET_NAME_START		varchar(200), -- Added by OMATKARI 8/19/18
  STREET_NAME_END			varchar(200), -- Added by OMATKARI 8/19/18
  CROSS_STREET_NAME_START	varchar(200), -- Added by OMATKARI 8/19/18
  CROSS_STREET_NAME_END	varchar(200), -- Added by OMATKARI 8/19/18
  HSE_NBR_ALPHA_START	VARCHAR(20),	-- Added By ALTARAZI 04/09/19
  HSE_NBR_ALPHA_END		VARCHAR(20),	-- Added By ALTARAZI 04/09/19
  LEVEL_PREFIX		VARCHAR(20),	-- Added By ALTARAZI 04/09/19
  LEVEL_NBR_START	VARCHAR(20),	-- Added By ALTARAZI 04/09/19
  LEVEL_NBR_END 	VARCHAR(20)		-- Added By ALTARAZI 04/09/19
)
go

CREATE UNIQUE INDEX AATABLE_PERMIT_ADDRESS_INDEX01 ON AATABLE_PERMIT_ADDRESS(PERMITNUM,FULL_ADDRESS)

IF EXISTS (SELECT * FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME = N'AATABLE_PERMIT_ADDRESS_TYPE')
BEGIN
DROP TABLE AATABLE_PERMIT_ADDRESS_TYPE
END
go
CREATE TABLE AATABLE_PERMIT_ADDRESS_TYPE
(
  PERMITNUM     VARCHAR(30)             NOT NULL,
  FULL_ADDRESS  VARCHAR(600)			NOT NULL,
  ADDRESS_TYPE  VARCHAR(30)             NOT NULL
)
go

CREATE UNIQUE INDEX AATABLE_PERMIT_ADDRESS_TYPE_INDEX01 ON AATABLE_PERMIT_ADDRESS_TYPE(PERMITNUM,FULL_ADDRESS,ADDRESS_TYPE)

IF EXISTS (SELECT * FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME = N'AATABLE_PERMIT_ATTRIB')
BEGIN
DROP TABLE AATABLE_PERMIT_ATTRIB
END
go
CREATE TABLE AATABLE_PERMIT_ATTRIB
(
  PERMITNUM         VARCHAR(30)           NOT NULL,
  ATTRIB_TYPE       VARCHAR(30)           NOT NULL,
  ATTRIB_TEMP_NAME  VARCHAR(30)           NOT NULL,
  ATTRIB_NAME       VARCHAR(30)           NOT NULL,
  ATTRIB_VALUE      VARCHAR(200)          NOT NULL,
  ATTRIB_KEY        VARCHAR(600)          NOT NULL
)
go

CREATE UNIQUE INDEX AATABLE_PERMIT_ATTRIB_INDEX01 ON AATABLE_PERMIT_ATTRIB(PERMITNUM,ATTRIB_TYPE,ATTRIB_TEMP_NAME,ATTRIB_NAME,ATTRIB_KEY)

IF EXISTS (SELECT * FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME = N'AATABLE_PERMIT_CALCVALUATN')
BEGIN
DROP TABLE AATABLE_PERMIT_CALCVALUATN
END
go
CREATE TABLE AATABLE_PERMIT_CALCVALUATN
(
  PERMITNUM        VARCHAR(30)            NOT NULL,
  OCC_TYPE         VARCHAR(60)            NOT NULL,
  CONST_TYPE       VARCHAR(70)            NOT NULL,
  UNIT_VALUE       NUMERIC(15,2)                 NOT NULL,
  AREA             NUMERIC(19),
  TOTALVALUE       NUMERIC(15,2)                 NOT NULL,
  UNIT_TYPE        VARCHAR(60),
  VALUATN_VERSION  VARCHAR(70)
)
go

IF EXISTS (SELECT * FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME = N'AATABLE_PERMIT_COMMENT')
BEGIN
DROP TABLE AATABLE_PERMIT_COMMENT
END
go
CREATE TABLE AATABLE_PERMIT_COMMENT
(
  PERMITNUM  VARCHAR(30)                  NOT NULL,
  COMMENTS   VARCHAR(MAX)                               NOT NULL,
  ADDEDBY    VARCHAR(70),
  ADDEDDATE  DATETIME
)
go

IF EXISTS (SELECT * FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME = N'AATABLE_PERMIT_CONDITIONS')
BEGIN
DROP TABLE  AATABLE_PERMIT_CONDITIONS
END
go
CREATE TABLE AATABLE_PERMIT_CONDITIONS
(
  PERMITNUM           VARCHAR(30)         NOT NULL,
  CON_COMMENTS        VARCHAR(4000)       NOT NULL,
  CON_DES             VARCHAR(255),
  CON_IMPACT_CODE     VARCHAR(8),
  EFFECTIVE_DATE      DATETIME,
  EXPIR_DATE          DATETIME,
  ISS_DD              DATETIME,
  STAT_DD             DATETIME,
  CON_STATUS          VARCHAR(30)         NOT NULL,
  CON_TYPE            VARCHAR(255)        NOT NULL,
  DISPLAY_ORDER       NUMERIC(5),
  CON_INHERITABLE     VARCHAR(1),
  CON_GROUP VARCHAR(255),
  ISS_USER_ID VARCHAR(50),
  STAT_USER_ID VARCHAR(50),
  INC_CON_NAME	VARCHAR(1),
  INC_SHORT_DESC VARCHAR(1),
  DIS_CON_NOTICE VARCHAR(1),
  CON_STATUS_TYP VARCHAR(20),
  LONG_COMMENTS VARCHAR(4000) -- Added By AALTARAZI 04/09/19
)
go

IF EXISTS (SELECT * FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME = N'AATABLE_PERMIT_CONT_EDU')
BEGIN
DROP TABLE  AATABLE_PERMIT_CONT_EDU
END
go
CREATE TABLE AATABLE_PERMIT_CONT_EDU
(
  PERMITNUM         VARCHAR(30)           NOT NULL,
  PROVIDER_NAME     VARCHAR(255)           NOT NULL,
  CONT_EDU_NAME     VARCHAR(80),
  IS_REQUIRED       VARCHAR(1),
  EDU_CLASS         VARCHAR(80),
  DATE_OF_CLASS     DATETIME,
  HOURS_COMPLETED   NUMERIC(15,2),
  GRADING_STYLE     VARCHAR(80),
  FINAL_SCORE       NUMERIC(15,2),
  PASSING_SCORE     NUMERIC(15,2),
  EDU_COMMENTS      VARCHAR(2000),
  ADDR1             VARCHAR(200),
  ADDR2             VARCHAR(200),
  ADDR3             VARCHAR(200),
  CITY              VARCHAR(30),
  STATE             VARCHAR(30),
  ZIP               VARCHAR(10),
  PH1_COUNTRY_CODE  VARCHAR(3),
  PH1               VARCHAR(40),
  PH2_COUNTRY_CODE  VARCHAR(3),
  PH2               VARCHAR(40),
  FAX_COUNTRY_CODE  VARCHAR(3),
  FAX               VARCHAR(40),
  EMAIL             VARCHAR(70),
  B1_COUNTRY VARCHAR(30)
)
go

IF EXISTS (SELECT * FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME = N'AATABLE_PERMIT_EDUCATION')
BEGIN
DROP TABLE  AATABLE_PERMIT_EDUCATION
END
go
CREATE TABLE AATABLE_PERMIT_EDUCATION
(
  PERMITNUM         VARCHAR(30)           NOT NULL,
  PROVIDER_NAME     VARCHAR(255)           NOT NULL,
  EDUCATION_NAME    VARCHAR(80),
  EDU_DEGREE        VARCHAR(30),
  YEAR_ATTENDED     VARCHAR(60),
  YEAR_GRADUATED    VARCHAR(60),
  EDU_COMMENTS      VARCHAR(2000),
  IS_REQUIRED       VARCHAR(1),
  ADDR1             VARCHAR(200),
  ADDR2             VARCHAR(200),
  ADDR3             VARCHAR(200),
  CITY              VARCHAR(30),
  STATE             VARCHAR(30),
  ZIP               VARCHAR(10),
  PH1_COUNTRY_CODE  VARCHAR(3),
  PH1               VARCHAR(40),
  PH2_COUNTRY_CODE  VARCHAR(3),
  PH2               VARCHAR(40),
  FAX_COUNTRY_CODE  VARCHAR(3),
  FAX               VARCHAR(40),
  EMAIL             VARCHAR(70),
  B1_COUNTRY VARCHAR(30)
)
go

IF EXISTS (SELECT * FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME = N'AATABLE_PERMIT_EXAM')
BEGIN
DROP TABLE AATABLE_PERMIT_EXAM
END
go
CREATE TABLE AATABLE_PERMIT_EXAM
(
  PERMITNUM         VARCHAR(30)           NOT NULL,
  PROVIDER_NAME     VARCHAR(255)           NOT NULL,
  EXAM_NAME         VARCHAR(80),
  IS_REQUIRED       VARCHAR(1),
  EXAM_DATE         DATETIME,
  GRADING_STYLE     VARCHAR(80),
  FINAL_SCORE       NUMERIC(15,2),
  PASSING_SCORE     NUMERIC(15,2),
  EXAM_COMMENTS     VARCHAR(2000),
  ADDR1             VARCHAR(200),
  ADDR2             VARCHAR(200),
  ADDR3             VARCHAR(200),
  CITY              VARCHAR(30),
  STATE             VARCHAR(30),
  ZIP               VARCHAR(10),
  PH1_COUNTRY_CODE  VARCHAR(3),
  PH1               VARCHAR(40),
  PH2_COUNTRY_CODE  VARCHAR(3),
  PH2               VARCHAR(40),
  FAX_COUNTRY_CODE  VARCHAR(3),
  FAX               VARCHAR(40),
  EMAIL             VARCHAR(70),
  B1_COUNTRY VARCHAR(30)
)
go

IF EXISTS (SELECT * FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME = N'AATABLE_PERMIT_FEE')
BEGIN
DROP TABLE AATABLE_PERMIT_FEE
END
go
CREATE TABLE AATABLE_PERMIT_FEE
(
  PERMITNUM               VARCHAR(30)     NOT NULL,
  FEE_KEY                 VARCHAR(255)    NOT NULL,
  GF_FEE_PERIOD           VARCHAR(15)     NOT NULL,
  FEE_ITEM_AMOUNT         NUMERIC(15,2)          NOT NULL,
  GF_DISPLAY              NUMERIC                NOT NULL,
  ACCOUNT_CODE1           VARCHAR(200),
  ACCOUNT_CODE2           VARCHAR(200),
  ACCOUNT_CODE3           VARCHAR(200),
  GF_FEE_SCHEDULE         VARCHAR(255),
  REC_DATE                DATETIME                NOT NULL,
  REC_FUL_NAM             VARCHAR(70)     NOT NULL,
  GF_UNIT                 NUMERIC(15,2),
  INVOICE                 VARCHAR(1),
  FEE_NOTES               VARCHAR(4000),
  FEE_SCHEDULE_VERSION    VARCHAR(255),
  INVOICE_CUSTOMIZED_NBR  VARCHAR(30),
  TT_FEE_CODE             VARCHAR(255)  NOT NULL,
  TT_FEE_DESC		  VARCHAR(255) NOT NULL,
  GF_FEE_TYPE_ALLOCATION VARCHAR(30),
  GF_L1_ALLOCATION NUMERIC(18,4),
  GF_L2_ALLOCATION NUMERIC(18,4),
  GF_L3_ALLOCATION NUMERIC(18,4),
  VOID_FLAG			VARCHAR(1),
  GF_FEE_APPLY_DATE		datetime not null 
)
go

CREATE UNIQUE INDEX AATABLE_PERMIT_FEE_INDEX01 ON AATABLE_PERMIT_FEE(PERMITNUM,FEE_KEY)

CREATE INDEX AATABLE_PERMIT_FEE_TT_INDEX02 ON AATABLE_PERMIT_FEE(TT_FEE_CODE,TT_FEE_DESC)

IF EXISTS (SELECT * FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME = N'AATABLE_PERMIT_FEEALLOCATION')
BEGIN
DROP TABLE AATABLE_PERMIT_FEEALLOCATION
END
go
CREATE TABLE AATABLE_PERMIT_FEEALLOCATION
(
PERMITNUM VARCHAR(30) NOT NULL,
FEE_KEY VARCHAR(255) NOT NULL,
PAY_KEY VARCHAR(255) NOT NULL,
-- FEE_ALLOCATION NUMERIC(15,2) NOT NULL --documentation states that this can be a varchar 2/15/2024
FEE_ALLOCATION VARCHAR(30) NOT NULL

)
go

CREATE UNIQUE INDEX AATBL_PERMIT_FEEALLOCATION_UIX ON AATABLE_PERMIT_FEEALLOCATION(PERMITNUM, FEE_KEY, PAY_KEY) ;

IF EXISTS (SELECT * FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME = N'AATABLE_PERMIT_GUIDESHEET')
BEGIN
DROP TABLE AATABLE_PERMIT_GUIDESHEET
END
go
CREATE TABLE AATABLE_PERMIT_GUIDESHEET
(
  PERMITNUM           VARCHAR(30)         NOT NULL,
  INSP_NUMBER         NUMERIC                    NOT NULL,
  GUIDE_KEY           VARCHAR(100)         NOT NULL,
  TT_ITEM_STATUS      VARCHAR(255) NOT NULL,
  COMMENTS            VARCHAR(2000),
  SCORE               NUMERIC(30),
  TT_GUIDE_TYPE		  VARCHAR(255) NOT NULL,
  TT_GUIDE_ITEM		  VARCHAR(255) NOT NULL,
  TEAM_NAME			  VARCHAR(50),
  FLOOR				  VARCHAR(50),
  FLOOR_UNIT		  VARCHAR(50),
  HISTORICAL_GUIDE_TEXT VARCHAR(2000),
  HISTORICAL_GUIDE_ITEM_STATUS_GROUP VARCHAR(30)
  
)
go
CREATE UNIQUE INDEX AATABLE_PERMIT_GUIDESHEET_UIX ON AATABLE_PERMIT_GUIDESHEET(PERMITNUM, INSP_NUMBER, TT_GUIDE_TYPE, TT_GUIDE_ITEM, GUIDE_KEY);

IF EXISTS (SELECT * FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME = N'AATABLE_PERMIT_HISTORY')
BEGIN
DROP TABLE AATABLE_PERMIT_HISTORY
END
go
CREATE TABLE AATABLE_PERMIT_HISTORY
(
  PERMITNUM                 VARCHAR(30)   NOT NULL,
  CONTRACTOR_VALUATION      NUMERIC(15,2),
  DATEOPENED                DATETIME NOT NULL,
  EXPIRATION_DATE           DATETIME,
  EXPIRATION_STATUS         VARCHAR(30),
  WORK_DESC                 VARCHAR(4000),
  APP_NAME                  VARCHAR(255),
  HOUSE_COUNT               NUMERIC(19),
  BUILDING_COUNT            NUMERIC(19),
  PUBLIC_OWNED              VARCHAR(1),
  CONST_TYPE_CODE           VARCHAR(4),
  SHORT_NOTES               VARCHAR(255),
  ASGN_DEPT                 VARCHAR(100),
  ASGN_STAFF                VARCHAR(50),
  ASGN_DATE                 DATETIME,
  COMPLETED_DEPT            VARCHAR(100),
  COMPLETED_BY              VARCHAR(50),
  COMPLETED_DATE            DATETIME,
  SCHEDULED_DATE            DATETIME,
  PRIORITY                  VARCHAR(30),
  TOTAL_JOB_COST            NUMERIC(15,2),
  CLOSED_DATE               DATETIME,
  CLOSED_BY                 VARCHAR(50),
  IVR_TRACKING_NUM          NUMERIC(19),
  CREATED_BY                VARCHAR(100),
  REPORTED_CHANNEL          VARCHAR(30),
  CREATED_BY_DEPT           VARCHAR(100),
  FIRST_ISSUED_DATE         DATETIME,
  ANONYMOUS_FLAG            VARCHAR(1),
  REFERENCE_TYPE            VARCHAR(30),
  APPEARANCE_DAYOFWEEK      VARCHAR(10),
  APPEARANCE_DATE           DATETIME,
  BOOKING_FLAG              VARCHAR(1),
  DEFENDANT_SIGNATURE_FLAG  VARCHAR(1),
  ENFORCE_OFFICER_ID        VARCHAR(12),
  ENFORCE_OFFICER_NAME      VARCHAR(70),
  INFRACTION_FLAG           VARCHAR(1),
  INSPECTOR_ID              VARCHAR(12),
  MISDEMEANOR_FLAG          VARCHAR(1),
  OFFENCE_WITNESSED_FLAG    VARCHAR(1),
  INSPECTOR_NAME            VARCHAR(70),
  ENFORCE_DEPT              VARCHAR(100),
  INSPECTOR_DEPT            VARCHAR(100),
  VALUATION_MULTIPLIER      NUMERIC(10,4) default 1.0000,
  VALUATION_EXTRA_AMT       NUMERIC(15,4),
  LAST_AUDIT_DATE           DATETIME,
  APP_STATUS_DATE           DATETIME,
  DELEGATE_USER_ID          VARCHAR(100),
  TT_RECORD_STATUS          VARCHAR(255)   NOT NULL,
  TT_RECORD                 VARCHAR(255)   NOT NULL,
  BALANCE					NUMERIC(15,2)	DEFAULT 0,
  TOTAL_FEE					NUMERIC(15,2)	DEFAULT 0,
  TOTAL_PAY					NUMERIC(15,2)	DEFAULT 0,
  LAST_UPDATE_BY 			VARCHAR(70),
  LAST_UPDATE_DATE			DATETIME
)
go

CREATE UNIQUE INDEX AATABLE_PERMIT_HISTORY_INDEX01 ON AATABLE_PERMIT_HISTORY(PERMITNUM)

CREATE INDEX AATABLE_PERMIT_HISTORY_INDEX02 ON AATABLE_PERMIT_HISTORY(TT_RECORD,TT_RECORD_STATUS)

IF EXISTS (SELECT * FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME = N'AATABLE_PERMIT_INSP')
BEGIN
DROP TABLE AATABLE_PERMIT_INSP
END
go
CREATE TABLE AATABLE_PERMIT_INSP
(
  PERMITNUM             VARCHAR(30)       NOT NULL,
  INSPDATE              DATETIME,
  INSPSCHEDDATE         DATETIME,
  INSPREQDATE           DATETIME,
  INSP_NUMBER           NUMERIC                  NOT NULL,
  INSP_REQUIRED         VARCHAR(1),
  PHONE_NUM             VARCHAR(40),
  LATITUDE              NUMERIC(13,10),
  LONGITUDE             NUMERIC(13,10),
  INSP_RESULT_COMM      VARCHAR(MAX),
  INSP_SCHED_COMM       VARCHAR(MAX),
  SD_OVERTIME           VARCHAR(1),
  DISPLAY_IN_ACA        VARCHAR(1),
  TT_INSPECTION         VARCHAR(255)                  NOT NULL,
  TT_INSPECTION_STATUS  VARCHAR(255)                  NOT NULL,
  CONTACT_NBR VARCHAR(100),
  INSP_SEQ_NBR NUMERIC,
  USER_ID VARCHAR(50),
  ORDER_BY 	NUMERIC   DEFAULT 1,
  G6_ACT_T1 VARCHAR(10),
  G6_ACT_T2 VARCHAR(10),
  G6_ACT_END_T1 VARCHAR(10),
  G6_ACT_END_T2 VARCHAR(10),
  G6_ACT_TT NUMERIC,
  ESTIMATED_START_TIME VARCHAR(10),
  ESTIMATED_END_TIME VARCHAR(10),
  G6_DESI_DD DATETIME,
  G6_DESI_TIME VARCHAR(10),
  G6_DESI_TIME2 VARCHAR(10),
  CONTACT_PHONE_NUM VARCHAR(40),
  CONTACT_PHONE_NUM_IDD VARCHAR(3),
  CONTACT_FNAME VARCHAR(70),
  CONTACT_MNAME VARCHAR(70),
  CONTACT_LNAME  VARCHAR(70),
  G6_REQ_PHONE_NUM_IDD  VARCHAR(3),
  G6_REQ_PHONE_NUM   VARCHAR(40),
  MAJOR_VIOLATION_COUNT NUMERIC,
  UNIT_NBR VARCHAR(20),
  GRADE VARCHAR(30),
  TOTAL_SCORE NUMERIC,
  VEHICLE_NUM VARCHAR(30),
  G6_MILE_T1 NUMERIC,
  G6_MILE_T2 NUMERIC,
  G6_MILE_TT NUMERIC,
  INSP_CANCELLED VARCHAR(1) DEFAULT  'N',
  INSP_PENDING VARCHAR(1) DEFAULT  'N',
  CLIENT_UNIQUE_ID VARCHAR(255)
)
go

CREATE UNIQUE INDEX AATABLE_PERMIT_INSP_INDEX01 ON AATABLE_PERMIT_INSP(INSP_NUMBER)

CREATE INDEX AATABLE_PERMIT_INSP_INDEX02 ON AATABLE_PERMIT_INSP(TT_INSPECTION,TT_INSPECTION_STATUS)

IF EXISTS (SELECT * FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME = N'AATABLE_PERMIT_INSPDISTRICTS')
BEGIN
DROP TABLE AATABLE_PERMIT_INSPDISTRICTS
END
go
CREATE TABLE AATABLE_PERMIT_INSPDISTRICTS
(
  PERMITNUM      VARCHAR(30)              NOT NULL,
  DIST_TYPE      VARCHAR(1)               NOT NULL,
  DIST_KEY       VARCHAR(600)             NOT NULL,
  INSP_DISTRICT  VARCHAR(30)              NOT NULL
)
go

IF EXISTS (SELECT * FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME = N'AATABLE_PERMIT_PARCEL')
BEGIN
DROP TABLE AATABLE_PERMIT_PARCEL
END
go
CREATE TABLE AATABLE_PERMIT_PARCEL
(
  PERMITNUM            VARCHAR(30)        NOT NULL,
  PARCELNUM            VARCHAR(24)        NOT NULL,
  BOOK                 VARCHAR(8),
  PAGE                 VARCHAR(8),
  PARCEL               VARCHAR(9),
  LOT                  VARCHAR(40),
  BLOCK                VARCHAR(15),
  TRACT                VARCHAR(80),
  LEGAL_DESC           VARCHAR(2000),
  PARCEL_AREA          NUMERIC(15,2),
  PLAN_AREA            VARCHAR(8),
  CENSUS_TRACT         VARCHAR(10),
  COUNCIL_DISTRICT     VARCHAR(10),
  SUPERVISOR_DISTRICT  VARCHAR(10),
  INSPECTION_DISTRICT  VARCHAR(255),
  LAND_VALUE           NUMERIC(15,2),
  IMPROVED_VALUE       NUMERIC(15,2),
  EXEMPT_VALUE         NUMERIC(15,2),
  MAP_REFERENCE        VARCHAR(30),
  MAP_NUMBER           VARCHAR(10),
  SUBDIVISION          VARCHAR(240),
  PRIMARY_FLAG         VARCHAR(1),
  TOWNSHIP             VARCHAR(10),
  RANGE                VARCHAR(10),
  SECTION              NUMERIC(10),
  EXT_PARCEL_UID	   VARCHAR(100)
)
go

CREATE UNIQUE INDEX AATABLE_PERMIT_PARCEL_INDEX01 ON AATABLE_PERMIT_PARCEL(PERMITNUM,PARCELNUM)

IF EXISTS (SELECT * FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME = N'AATABLE_PERMIT_PEOPLE')
BEGIN
DROP TABLE AATABLE_PERMIT_PEOPLE
END
go
CREATE TABLE AATABLE_PERMIT_PEOPLE
(
  PERMITNUM                VARCHAR(30)    NOT NULL,
  TT_CONTACT_TYPE          VARCHAR(255),
  CONTACT_RELATIONSHIP     VARCHAR(255),
  ISPRIMARY                VARCHAR(1),
  LIC_NUM                  VARCHAR(30),
  LIC_TYPE                 VARCHAR(255),
  NAME                     VARCHAR(220),
  FNAME                    VARCHAR(70),
  MNAME                    VARCHAR(70),
  LNAME                    VARCHAR(70),
  BUS_NAME                 VARCHAR(255),
  ADDR1                    VARCHAR(200),
  ADDR2                    VARCHAR(200),
  ADDR3                    VARCHAR(200),
  CITY                     VARCHAR(30),
  STATE                    VARCHAR(30),
  ZIP                      VARCHAR(10),
  PH1                      VARCHAR(40),
  PH2                      VARCHAR(40),
  FAX                      VARCHAR(40),
  EMAIL                    VARCHAR(80),
  COMMENTS                 VARCHAR(240),
  TITLE                    VARCHAR(255),
  PH3                      VARCHAR(40),
  COUNTRY_CODE             VARCHAR(2),
  NOTIFY                   VARCHAR(1),
  NAME_SUFFIX              VARCHAR(10),
  BUS_LIC                  VARCHAR(15),
  LIC_ORIGINAL_ISSUE_DATE  DATETIME,
  EXPIRATION_DATE          DATETIME,
  RENEWAL_DATE             DATETIME,
  MAIL_ADDR1               VARCHAR(100),
  MAIL_ADDR2               VARCHAR(40),
  MAIL_ADDR3               VARCHAR(40),
  MAIL_CITY                VARCHAR(32),
  MAIL_STATE               VARCHAR(30),
  MAIL_ZIP                 VARCHAR(10),
  MAIL_COUNTRY             VARCHAR(30),
  OWNER_TYPE               VARCHAR(30),
  GENDER                   VARCHAR(1),
  SALUTATION               VARCHAR(255),
  PO_BOX                   VARCHAR(30),
  BUS_NAME2                VARCHAR(255),
  BIRTH_DATE               DATETIME,
  PH1_COUNTRY_CODE         VARCHAR(3),
  PH2_COUNTRY_CODE         VARCHAR(3),
  FAX_COUNTRY_CODE         VARCHAR(3),
  PH3_COUNTRY_CODE         VARCHAR(3),
  TRADE_NAME               VARCHAR(255),
  CONTACT_TYPE_FLAG        VARCHAR(20),
  SOCIAL_SECURITY_NUMBER   VARCHAR(11),
  FEDERAL_EMPLOYER_ID_NUM  VARCHAR(16),
  CONTRA_TYPE_FLAG         VARCHAR(20),
  LIC_BOARD                VARCHAR(255),
  B1_ID                    VARCHAR(15),
  CONT_LIC_BUS_NAME        VARCHAR(255),
  B1_ACCESS_LEVEL          VARCHAR(20),
BIRTH_CITY VARCHAR(30),
BIRTH_STATE VARCHAR(30),
BIRTH_REGION VARCHAR(30),
B1_CONTACT_NBR NUMERIC,
DECEASED_DATE DATETIME,
DRIVER_LIC_NBR VARCHAR(100),
DRIVER_LIC_STATE VARCHAR(30),
PASSPORT_NBR VARCHAR(100),
STATE_ID_NBR VARCHAR(100),
RACE VARCHAR(280),
G1_CONTACT_NBR NUMERIC,
LIC_STATE    VARCHAR(30)
)
go

IF EXISTS (SELECT * FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME = N'AATABLE_PERMIT_PEOPLEATTRIB')
BEGIN
DROP TABLE AATABLE_PERMIT_PEOPLEATTRIB
END
go
CREATE TABLE AATABLE_PERMIT_PEOPLEATTRIB
(
  PERMITNUM         VARCHAR(30)           NOT NULL,
  ATTRIB_KEY        VARCHAR(10)           NOT NULL,
  ATTRIB_TEMP_NAME  VARCHAR(30)           NOT NULL,
  ATTRIB_TYPE       VARCHAR(255)          NOT NULL,
  ATTRIB_NAME       VARCHAR(30)           NOT NULL,
  NAME              VARCHAR(80)           NOT NULL,
  ATTRIB_VALUE      VARCHAR(200)          NOT NULL
)
go

IF EXISTS (SELECT * FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME = N'AATABLE_PERMIT_PEOPLELICTABLE')
BEGIN
DROP TABLE AATABLE_PERMIT_PEOPLELICTABLE
END
go
CREATE TABLE AATABLE_PERMIT_PEOPLELICTABLE
(
  PERMITNUM    VARCHAR(30)                NOT NULL,
  LIC_NUM      VARCHAR(30)                NOT NULL,
  LIC_TYPE     VARCHAR(255)               NOT NULL,
  TABLE_NAME   VARCHAR(30)                NOT NULL,
  COLUMN_NAME  VARCHAR(100)               NOT NULL,
  ROW_NUM      NUMERIC(5)                        NOT NULL,
  COLUMN_NUM   NUMERIC(2),
  TABLE_VALUE  VARCHAR(4000)               NOT NULL
)
go

IF EXISTS (SELECT * FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME = N'AATABLE_PERMIT_PROJECTS')
BEGIN
DROP TABLE AATABLE_PERMIT_PROJECTS
END
go
CREATE TABLE AATABLE_PERMIT_PROJECTS
(
  PARENTACTIVITYNUM  VARCHAR(30)          NOT NULL,
  CHILDACTIVITYNUM   VARCHAR(30)          NOT NULL,
  RELATIONSHIP VARCHAR(30),
  STATUS VARCHAR(30)
)
go

CREATE UNIQUE INDEX AATABLE_PERMIT_PROJECTS_INDEX01 ON AATABLE_PERMIT_PROJECTS(PARENTACTIVITYNUM,CHILDACTIVITYNUM)

IF EXISTS (SELECT * FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME = N'AATABLE_PERMIT_STATUS')
BEGIN
DROP TABLE AATABLE_PERMIT_STATUS
END
go
CREATE TABLE AATABLE_PERMIT_STATUS
(
  PERMITNUM       VARCHAR(30)             NOT NULL,
  STATUS          VARCHAR(30)             NOT NULL,
  STATUS_DATE     DATETIME                NOT NULL,
  STATUS_COMMENT  VARCHAR(4000),
  USER_ID		  VARCHAR(50),
  ORDER_BY		  NUMERIC				  DEFAULT 1 				
)
go

IF EXISTS (SELECT * FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME = N'AATABLE_PERMIT_STRU_ESTA')
BEGIN
DROP TABLE AATABLE_PERMIT_STRU_ESTA
END
go
CREATE TABLE AATABLE_PERMIT_STRU_ESTA
(
  PERMITNUM  VARCHAR(30)                  NOT NULL,
  L1_NUMBER  VARCHAR(30)                  NOT NULL,
  L1_GROUP   VARCHAR(30)                  NOT NULL,
  L1_TYPE    VARCHAR(30)                  NOT NULL
)
go

IF EXISTS (SELECT * FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME = N'AATABLE_PERMIT_WORKFLOW')
BEGIN
DROP TABLE AATABLE_PERMIT_WORKFLOW
END
go
CREATE TABLE AATABLE_PERMIT_WORKFLOW
(
  PERMITNUM    VARCHAR(30)                NOT NULL,
  TASKUPDATED  DATETIME                   NOT NULL,
  COMMENTS     VARCHAR(4000),
  ASGN_DATE    DATETIME,
  DUE_DATE     DATETIME,
  TT_WORKFLOW_TASK  VARCHAR(255)                NOT NULL,
  TT_WORKFLOW_STATUS  VARCHAR(255)                NOT NULL,
  USER_ID	   VARCHAR(50),
  ID           NUMERIC					 DEFAULT 0,
  SD_HOURS_SPENT              NUMERIC(5,2),
  SD_BILLABLE                 VARCHAR(1),
  SD_OVERTIME                 VARCHAR(1),
  ESTIMATED_HOURS             NUMERIC(5,2),
  ASGN_EMAIL_DISPLAY_FOR_ACA  VARCHAR(1),
  RESTRICT_COMMENT_FOR_ACA    VARCHAR(1),
  RESTRICT_ROLE               VARCHAR(10),
  TASK_UNIQUE_ID              VARCHAR(255)
)
go

CREATE INDEX AATABLE_PERMIT_WORKFLOW_TT_WORKFLOW_TASK_INDEX ON AATABLE_PERMIT_WORKFLOW(TT_WORKFLOW_TASK,TT_WORKFLOW_STATUS)


IF EXISTS (SELECT * FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME = N'AATABLE_TRUST_ACCOUNT_TRANS')
BEGIN
DROP TABLE AATABLE_TRUST_ACCOUNT_TRANS
END
go
CREATE TABLE AATABLE_TRUST_ACCOUNT_TRANS
(
  ACCOUNT_ID        VARCHAR(15)           NOT NULL,
  TRANS_TYPE        VARCHAR(70)           NOT NULL,
  TRANS_AMOUNT      NUMERIC(15,2)                NOT NULL,
  TRANS_DATE        DATETIME                NOT NULL,
  TRANS_BY          VARCHAR(70),
  TARGET_ACCT_ID    VARCHAR(15),
  PERMITNUM         VARCHAR(30),
  PAY_KEY			VARCHAR(255)
)
go

IF EXISTS (SELECT * FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME = N'AATABLE_TRUST_ACCOUNTS')
BEGIN
DROP TABLE AATABLE_TRUST_ACCOUNTS
END
go
CREATE TABLE AATABLE_TRUST_ACCOUNTS
(
  ACCOUNT_ID           VARCHAR(15)        NOT NULL,
  ACCOUNT_BALANCE      NUMERIC(15,2),
  LEDGER_ACCOUNTNUM    VARCHAR(50),
  ACCT_DESC            VARCHAR(30),
  ACCT_STATUS          VARCHAR(10),
  ACCT_OVERDRAFT       VARCHAR(1),
  ACCT_OVERDRAFTLIMIT  NUMERIC(15,2),
  THRESHOLD_AMT        NUMERIC(15,2)
)
go

IF EXISTS (SELECT * FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME = N'AATABLE_TRUST_ACCT_PEOPLE_LINKS')
BEGIN
DROP TABLE AATABLE_TRUST_ACCT_PEOPLE_LINKS
END
go
create table AATABLE_TRUST_ACCT_PEOPLE_LINKS  (
account_id              varchar(15)    not null,
contact_nbr numeric(22) ,
lic_nbr varchar(30),
lic_type varchar(255),
lic_state varchar(30)
)
GO
create unique index aatbl_trust_acct_people_links_uix on AATABLE_TRUST_ACCT_PEOPLE_LINKS(account_id, contact_nbr, lic_nbr, lic_type, lic_state)
GO

IF EXISTS (SELECT * FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME = N'AATABLE_PERMIT_AUDIT_SETS')
BEGIN
DROP TABLE AATABLE_PERMIT_AUDIT_SETS
END
GO

CREATE TABLE AATABLE_PERMIT_AUDIT_SETS (
PERMITNUM       VARCHAR(30) NOT NULL,
SET_ID          VARCHAR(100) NOT NULL
) 
GO

IF EXISTS (SELECT * FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME = N'AATABLE_permit_TaskSpecAdHoc')
BEGIN
DROP TABLE AATABLE_permit_TaskSpecAdHoc
END
GO

CREATE TABLE AATABLE_PERMIT_TASKSPECADHOC (
PERMITNUM              VARCHAR(30)    NOT NULL,
TASK_SPEC_CODE         VARCHAR(12)    NOT NULL,
TASK_SPEC_TYPE         VARCHAR(30)    NOT NULL,
TASK_SPEC_NAME         VARCHAR(100)   NOT NULL,
TASK_SPEC_VALUE        VARCHAR(240)   NOT NULL,
PROCESS_CODE           VARCHAR(70)    NOT NULL,
TASK_DESC              VARCHAR(70)    NOT NULL,
SD_STP_NUM             NUMERIC
)
GO

IF EXISTS (SELECT * FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME = N'AATABLE_pos_transaction')
BEGIN
DROP TABLE AATABLE_pos_transaction
END
GO

CREATE TABLE AATABLE_pos_transaction 
( 
	tran_key       NUMERIC      NOT NULL, -- Loaded it to f4pos_transaction.batch_transaction_nbr
	module_name    VARCHAR(15) NOT NULL,
	pos_trans_type VARCHAR(30) NOT NULL
)
GO


IF EXISTS (SELECT * FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME = N'AATABLE_pos_trans_fee')
BEGIN
DROP TABLE AATABLE_pos_trans_fee
END
GO

CREATE TABLE AATABLE_pos_trans_fee ( 
	tran_key                NUMERIC         NOT NULL, 
	fee_key                 VARCHAR(255)   NOT NULL,
	gf_cod                  VARCHAR(15)    NOT NULL,
	gf_des                  VARCHAR(100)   NOT NULL,
	gf_unit                 NUMERIC(18,4),
	gf_fee                  NUMERIC(15,2),
	gf_fee_apply_date       DATETIME,
	gf_sub_group            VARCHAR(40),
	gf_fee_schedule         VARCHAR(255),
	gf_fee_schedule_version VARCHAR(255),
	fee_notes               VARCHAR(4000)
)
GO


IF EXISTS (SELECT * FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME = N'AATABLE_pos_trans_pay')
BEGIN
DROP TABLE AATABLE_pos_trans_pay
END
go

CREATE TABLE AATABLE_pos_trans_pay (
	tran_key                NUMERIC         NOT NULL,
	pay_key                 VARCHAR(255)   NOT NULL,
	payment_status          VARCHAR(30)    NOT NULL,
	payment_amount          NUMERIC(15,2)    NOT NULL,
	payment_date            DATETIME            NOT NULL,
	cashier_id              VARCHAR(70)    NOT NULL,
	payment_method          VARCHAR(30),
	payment_ref_nbr         VARCHAR(70),
	payee                   VARCHAR(600),
	payee_address           VARCHAR(240),
	payee_phone             VARCHAR(240),
	cc_auth_code            VARCHAR(30),
	payment_comment         VARCHAR(2000),
	HIST_RECEIPT_NBR        VARCHAR(75)    NOT NULL,
	register_nbr            VARCHAR(8),
	VOID_DATE               DATETIME,
	VOID_BY                 VARCHAR(70) 
)
GO

IF EXISTS (SELECT * FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME = N'AATABLE_PERMIT_TRUST')
BEGIN
DROP TABLE AATABLE_PERMIT_TRUST 
END
GO

CREATE TABLE AATABLE_PERMIT_TRUST (
PERMITNUM            VARCHAR(30) NOT NULL,
TRUST_ACCOUNT_ID     VARCHAR(15) NOT NULL
) 
GO

CREATE UNIQUE INDEX AATABLE_PERMIT_TRUST_INDEX01 ON AATABLE_PERMIT_TRUST(PERMITNUM,TRUST_ACCOUNT_ID)

IF EXISTS (SELECT * FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME = N'AATABLE_permit_time_accounting')
BEGIN
DROP TABLE AATABLE_permit_time_accounting
END
GO

CREATE TABLE AATABLE_permit_time_accounting (
    permitnum         VARCHAR(30) NOT NULL,
    tt_time_group_name   VARCHAR(255) NOT NULL,
    tt_time_type_name    VARCHAR(255) NOT NULL,
    billable_flag     VARCHAR(1) NOT NULL,
    log_DATE          DATETIME NOT NULL,
    time_start        DATETIME,
    time_end          DATETIME,
    time_elapsed      DATETIME NOT NULL,
    total_minutes     NUMERIC NOT NULL,
    materials_desc    VARCHAR(64),
    materials_cost    NUMERIC(17,4),
    Mileage_start     NUMERIC(17,4),
    Mileage_end       NUMERIC(17,4),
    Milage_total      NUMERIC(17,4),
    vehicle_id        VARCHAR(250),
    entry_rate        NUMERIC(17,4) NOT NULL,
    entry_pct         NUMERIC(12,4) NOT NULL,
    entry_cost        NUMERIC(17,4) NOT NULL,
    created_DATE      DATETIME NOT NULL,
    created_by        VARCHAR(70) NOT NULL,
    notation          VARCHAR(250),
    group_seq_nbr     NUMERIC NOT NULL,
    entity_id         VARCHAR(50),
    entity_type       VARCHAR(20) constraint aatbl_chk_entity_type check (entity_type in ('INSPECTION','WORKFLOW', 'N/A','RECORD')), 
    user_name         VARCHAR(50) NOT NULL,
    Unique_Id         VARCHAR(100),
	TIME_LOG_STATUS   VARCHAR(1) NOT NULL constraint aatbl_chk_time_log_status check (TIME_LOG_STATUS in ('U','L')),
	RECORD_TYPE		  VARCHAR(3) not null constraint aatbl_chk_record_type check (RECORD_TYPE in ('CAP','N/A'))
    )
GO

IF EXISTS (SELECT * FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME = N'AATABLE_PERMIT_WORKFLOWADHOC')
BEGIN
DROP TABLE AATABLE_PERMIT_WORKFLOWADHOC
END
GO

CREATE TABLE AATABLE_permit_workflowAdHoc (
  PERMITNUM              VARCHAR(30)    NOT NULL,
  TASK_DESC              VARCHAR(100)   NOT NULL,
  TASK_STATUS            VARCHAR(200)    NOT NULL,
  TASKUPDATED            DATETIME            NOT NULL,
  FNAME                  VARCHAR(70),
  MNAME                  VARCHAR(70),
  LNAME                  VARCHAR(70),
  COMMENTS               VARCHAR(4000),
  PROCESS_CODE           VARCHAR(70),
  CHECK_LEVEL1           VARCHAR(1)     NOT NULL,
  CHECK_LEVEL2           VARCHAR(1)     NOT NULL, 
  G6_ASGN_DD             DATETIME,
  B1_DUE_DD              DATETIME,
  SD_DUE_DAY             NUMERIC(22),
  SD_NOTE                VARCHAR(2000),
  SD_STP_NUM             NUMERIC,
  ASGN_AGENCY_CODE       VARCHAR(8),
  ASGN_BUREAU_CODE       VARCHAR(8),
  ASGN_DIVISION_CODE     VARCHAR(8),
  ASGN_GROUP_CODE        VARCHAR(8),
  ASGN_SECTION_CODE      VARCHAR(8),
  ASGN_OFFICE_CODE       VARCHAR(8),
  ASGN_FNAME             VARCHAR(70),
  ASGN_MNAME             VARCHAR(70),
  ASGN_LNAME             VARCHAR(70)
)
GO

IF EXISTS (SELECT * FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME = N'AATABLE_PERMIT_COSTING_AMS')
BEGIN
DROP TABLE AATABLE_PERMIT_COSTING_AMS
END
GO

CREATE TABLE AATABLE_PERMIT_COSTING_AMS (
PERMITNUM               VARCHAR(30)     NOT NULL,
COST_NAME 		          VARCHAR(100)    NOT NULL, -- Leg db cost item key
COST_DATE               DATETIME        NOT NULL,
COST_TYPE               VARCHAR(70)     NOT NULL,      -- Change length to 70 by zeal on 05/16/2011
COST_ITEM               VARCHAR(100)    NOT NULL ,
COST_FIX                NUMERIC(17,4)   DEFAULT 0,
COST_FACTOR             NUMERIC(17,4)   DEFAULT 0,   --Standard Choice of 'COST_FACTOR'
COST_UNIT_COST          NUMERIC(17,4)   NOT NULL, 
COST_UNIT_TYPE          VARCHAR(10),    --Standard Choice of 'COST_UNIT_TYPE'
COST_QUANTITY           NUMERIC(17,4)   DEFAULT 0, 
cost_item_total         numeric(17,4)   null,
COST_COMMENTS           VARCHAR(2000)   NULL,
Updated_by 						  varchar(70),		--Add by zeal on 05/17/2011
Updated_date 						DATETIME,				--Add by zeal on 05/17/2011
COST_STATUS							VARCHAR(15),	 --Add by zeal on 05/17/2011
START_TIME							VARCHAR(5),		 --Add by zeal on 05/17/2011
END_TIME								VARCHAR(5),		 --Add by zeal on 05/17/2011
RELATED_ASGN_NBR				bigint,		 --Add by zeal on 05/17/2011,
TASK_CODE 			VARCHAR(30),
TASK_CODE_INDEX		NUMERIC
)
GO

IF EXISTS (SELECT * FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME = N'AATABLE_permit_asset_ams')
BEGIN
DROP TABLE AATABLE_permit_asset_ams
END
GO

Create table AATABLE_permit_asset_ams (
permitnum varchar(30) not null,
asset_id varchar(65)  NOT NULL,
asset_group varchar(30) not null,
asset_type varchar(30) not null,
WOASSET_ORDER NUMERIC(10) ,   --08/18/2010  Increase to 10
WOASSET_COMPLETE VARCHAR(1),
WOASSET_COMPLETE_DATE DATETIME,
WOASSET_SHORT_NOTES VARCHAR(2000) 
)

go

CREATE UNIQUE INDEX AATABLE_PERMIT_ASSET_AMS_INDEX01 ON AATABLE_PERMIT_ASSET_AMS(PERMITNUM,ASSET_ID,ASSET_GROUP,ASSET_TYPE)

IF EXISTS (SELECT * FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME = N'AATABLE_PERMIT_TASK_AMS')
BEGIN
DROP TABLE AATABLE_PERMIT_TASK_AMS
END
GO

CREATE TABLE AATABLE_PERMIT_TASK_AMS(
PERMITNUM			VARCHAR(30) NOT NULL,
TASK_CODE 			VARCHAR(30) NOT NULL, -- Refers to RWO_TASK.R1_TASK_CODE
TASK_CODE_INDEX		NUMERIC  NOT NULL,
TASK_DESCRIPTION  	VARCHAR(2000),
OPERATION_PROCEDURE	VARCHAR(2000),
ESTIMATE_EFFORT 	NUMERIC(15,2),
DURATION_UNIT 		VARCHAR(10), --Standard Choice of 'WO_TASK_DURATION_UNIT'
ACTUAL_EFFORT 		NUMERIC(15,2),
COMPLETE_DATE 		DATETIME,
COMPLETE_BY 		VARCHAR(70),
COMMENTS  			VARCHAR(2000),
TASK_ORDER 			NUMERIC(8)  NOT NULL
)
GO

CREATE UNIQUE INDEX AATABLE_PERMIT_TASK_AMS_INDEX01 ON AATABLE_PERMIT_TASK_AMS(PERMITNUM,TASK_CODE,TASK_CODE_INDEX)

IF EXISTS (SELECT * FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME = N'AATABLE_PERMIT_COST_DIST')
BEGIN
DROP TABLE AATABLE_PERMIT_COST_DIST
END
GO

CREATE TABLE AATABLE_PERMIT_COST_DIST (
PERMITNUM 	VARCHAR(30) NOT NULL,
ASSET_ID 	VARCHAR(65) NOT NULL,
ASSET_HIST_TYPE   VARCHAR(100)    NOT NULL,   -- Historical Asset type
PART_NUMBER VARCHAR(50),
COST_NAME 		VARCHAR(100)
)
GO

IF EXISTS (SELECT * FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME = N'AATABLE_PERMIT_PART_AMS')
BEGIN
DROP TABLE AATABLE_PERMIT_PART_AMS
END
go


CREATE TABLE AATABLE_PERMIT_PART_AMS (
PERMITNUM varchar(30) NOT NULL,
TRANSACTION_TYPE varchar(30) NOT NULL, -- VALID VALUES ARE  ISSUE AND VOID
TRANSACTION_DATE DATETIME  NOT NULL ,
QUANTITY NUMERIC(17,4) NOT NULL,
PART_NUMBER varchar(50)  NOT NULL,
LOCATION_NAME varchar(100) NOT NULL, 
PART_BIN varchar(30) , 
TAXABLE varchar(1) ,
PART_BRAND varchar(100),
PART_DESCRIPTION varchar(2000),
PART_TYPE  varchar(50),
UNIT_OF_MEASUREMENT varchar(30),
UNIT_OF_COST NUMERIC(17,4),
COMMENTS varchar(2000) ,
LAST_UPDATED_DATE  DATETIME,
LAST_UPDATED_BY varchar(70)
)

IF EXISTS (SELECT * FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME = N'AATABLE_REFER_PEOPLE')
BEGIN
DROP TABLE AATABLE_REFER_PEOPLE
END
GO

CREATE TABLE AATABLE_REFER_PEOPLE  
(CONTACT_NBR            numeric(22)  NOT NULL,
TT_CONTACT_TYPE         VARCHAR(255) NOT NULL,
TITLE                   VARCHAR(255),
FNAME                   VARCHAR(70),
MNAME                   VARCHAR(70),
LNAME                   VARCHAR(70),
NAME_SUFFIX	            VARCHAR(10),
FULL_NAME               VARCHAR(220),	
BUS_NAME                VARCHAR(255),
ADDR1                   VARCHAR(200),
ADDR2                   VARCHAR(200),
ADDR3                   VARCHAR(200),
CITY                    VARCHAR(30),
STATE                   VARCHAR(30),
ZIP                     VARCHAR(10),
COUNTRY                 VARCHAR(30),
PH1                     VARCHAR(40),
PH2                     VARCHAR(40),
FAX                     VARCHAR(40),
EMAIL                   VARCHAR(80),
G1_ID                   VARCHAR(15),
G1_FLAG                 VARCHAR(1),
COMMENTS                VARCHAR(240),
RELATION                VARCHAR(255),
G1_PREFERRED_CHANNEL    numeric(2),
COUNTRY_CODE	          VARCHAR(2),
GA_IVR_PIN              numeric(10),
PH3	                    VARCHAR(40),	
SALUTATION              VARCHAR(255),
GENDER                  VARCHAR(1),	
POST_OFFICE_BOX         VARCHAR(30),	
BIRTH_DATE              datetime,	
PH1_COUNTRY_CODE        VARCHAR(3),	
PH2_COUNTRY_CODE        VARCHAR(3),	
PH3_COUNTRY_CODE        VARCHAR(3),	
FAX_COUNTRY_CODE	      VARCHAR(3),
SOCIAL_SECURITY_number  VARCHAR(11),
FEDERAL_EMPLOYER_ID_NUM VARCHAR(16),
TRADE_NAME	            VARCHAR(255),	
CONTACT_TYPE_FLAG       VARCHAR(20),
BUSINESS_NAME2          VARCHAR(255),
BIRTH_CITY              VARCHAR(30),
BIRTH_STATE             VARCHAR(30),
BIRTH_REGION            VARCHAR(30),
G1_RACE                 VARCHAR(280),
DECEASED_DATE           datetime,
PASSPORT_NBR            VARCHAR(100),
DRIVER_LICENSE_NBR      VARCHAR(100),
DRIVER_LICENSE_STATE	  VARCHAR(30),
STATE_ID_NBR            VARCHAR(100)
)
GO

CREATE UNIQUE INDEX AATABLE_REFER_PEOPLE_CONTACT_NBR_INDEX ON AATABLE_REFER_PEOPLE(CONTACT_NBR)

IF EXISTS (SELECT * FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME = N'AATABLE_REFER_PEOPLECONDIT')
BEGIN
DROP TABLE AATABLE_REFER_PEOPLECONDIT
END
GO

CREATE TABLE AATABLE_REFER_PEOPLECONDIT
(
  ENTITY_TYPE               VARCHAR(50) NOT NULL,
  ENTITY_ID                 VARCHAR(30) NOT NULL,
  L1_CON_NBR                NUMERIC(22) NOT NULL,
  CON_COMMENT               VARCHAR(4000),
  CON_DES                   VARCHAR(255),
  CON_EFF_DD1               datetime,
  CON_EXPIR_DD              datetime,
  CON_IMPACT_CODE           VARCHAR(8),
  CON_REF_NUM1              VARCHAR(20),
  CON_REF_NUM2              VARCHAR(20),
  CON_STATUS                VARCHAR(30),
  CON_TYP                   VARCHAR(255),
  CON_LONG_COMMENT          VARCHAR(4000),
  CON_DIS_CON_NOTICE        VARCHAR(1),
  CON_INC_CON_NAME          VARCHAR(1),
  CON_INC_SHORT_DESC        VARCHAR(1),
  CON_INHERITABLE           VARCHAR(1),
  CON_STATUS_TYP            VARCHAR(20),
  CON_GROUP                 VARCHAR(255),
  CON_DIS_NOTICE_ACA        VARCHAR(1),
  CON_DIS_NOTICE_ACA_FEE    VARCHAR(1),
  R3_CON_RESOLUTION_ACTION  VARCHAR(4000),     --maps to rcoa_detail
  R3_CON_PUBLIC_DIS_MESSAGE VARCHAR(2000),     --maps to rcoa_detail
  PRIORITY                  NUMERIC(5),        --maps to rcoa_detail
  ADDITIONAL_INFORMATION    VARCHAR(MAX)               --maps to rcoa_detail
)
GO

IF EXISTS (SELECT * FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME = N'AATABLE_REFER_PEOPLEADDR')
BEGIN
DROP TABLE AATABLE_REFER_PEOPLEADDR
END
GO

CREATE TABLE AATABLE_REFER_PEOPLEADDR
( 
  ENTITY_TYPE        VARCHAR(15) NOT NULL,
  ENTITY_ID          numeric(22) NOT NULL,
  ADDRESS_TYPE       VARCHAR(255),
  EFF_DATE           datetime,
  EXPR_DATE          datetime,
  RECIPIENT          VARCHAR(220),
  FULL_ADDRESS       VARCHAR(1024),
  ADDRESS1           VARCHAR(200),
  ADDRESS2           VARCHAR(200),
  ADDRESS3           VARCHAR(200),
  HSE_NBR_START      numeric(9),
  HSE_NBR_END        numeric(9),
  STR_DIR            VARCHAR(20),
  STR_PREFIX         VARCHAR(20),
  STR_NAME           VARCHAR(40),
  STR_SUFFIX         VARCHAR(30),
  UNIT_TYPE          VARCHAR(20),
  UNIT_START         VARCHAR(10),
  UNIT_END           VARCHAR(10),
  STR_SUFFIX_DIR     VARCHAR(20),
  COUNTRY_CODE       VARCHAR(2),
  CITY               VARCHAR(32),
  STATE              VARCHAR(30),
  ZIP                VARCHAR(10),
  PHONE              VARCHAR(40),
  PHONE_COUNTRY_CODE VARCHAR(3),
  FAX                VARCHAR(40),
  FAX_COUNTRY_CODE   VARCHAR(3),
  HSE_NBR_ALPHA_START VARCHAR(20),
  HSE_NBR_ALPHA_END   VARCHAR(20),
  LEVEL_PREFIX        VARCHAR(20),
  LEVEL_NBR_START     VARCHAR(20),
  LEVEL_NBR_END       VARCHAR(20),
  VALIDATE_ADDR_FLAG  VARCHAR(1),
  PRIMARY_ADDR_FLAG   VARCHAR(1)
)
GO

-- Standard Map tables for Assets 
IF EXISTS (SELECT * FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME = N'AATABLE_AMS_MASTER')
BEGIN
DROP TABLE AATABLE_AMS_MASTER
END
GO

CREATE TABLE AATABLE_AMS_MASTER (
ASSET_ID                VARCHAR(65) NOT NULL,
ASSET_HIST_TYPE         VARCHAR(100)    NOT NULL,   -- Historical Asset type
ASSET_GROUP             VARCHAR(30) NOT NULL, -- Refers to RASSET_TYPE.R1_ASSET_GROUP
ASSET_TYPE              VARCHAR(30) NOT NULL, -- Refers to RASSET_TYPE.R1_ASSET_TYPE
CLASS_TYPE							VARCHAR(30) NOT NULL, -- Refers to RASSET_TYPE.R1_CLASS_TYPE
ASSET_DESC              VARCHAR(255),
ASSET_STATUS            VARCHAR(30) DEFAULT  'Active', -- Standard Choice of 'ASSET_STATUS'
ASSET_STATUS_DATE       DATETIME,
ASSET_COMMENTS          VARCHAR(2000),
START_VALUE             NUMERIC(17,4), -- INITIAL VALUE OF ASSET
DATE_OF_SERVICE         DATETIME,
USEFUL_LIFE             NUMERIC(15,2),
SALVAGE_VALUE           NUMERIC(17,4),
CURRENT_VALUE           NUMERIC(17,4),
DEPRECIATION_START_DATE DATETIME,
DEPRECIATION_END_DATE   DATETIME,
DEPRECIATION_AMOUNT     NUMERIC(17,4),
DEPRECIATION_VALUE      NUMERIC(17,4),
ASSET_START_ID          VARCHAR(30),
ASSET_END_ID            VARCHAR(30),
DEPENDENCIES_FLAG       VARCHAR(1),
ASSET_SIZE              NUMERIC(15,2),
ASSET_SIZE_UNIT         VARCHAR(30),  -- Standard Choice of 'ASSET_SIZE_UNIT'    %%%%%%%%%%%%%%%
RES_ID					NUMERIC,
G1_ASSET_NAME			VARCHAR(50)
) 
GO


/* ***** Translation Tables List ***** 

ASSET Status Translation Table
ASSET Type Translation Table
Asset Size Unit Translation Table

*/
--ALTER TABLE AMS_MASTER ADD CONSTRAINT AMS_MASTER_PK PRIMARY KEY (ASSET_ID, ASSET_HIST_TYPE, ASSET_GROUP, ASSET_TYPE)
ALTER TABLE AATABLE_AMS_MASTER ADD CONSTRAINT AATABLE_AMS_MASTER_PK PRIMARY KEY (ASSET_ID,  ASSET_GROUP, ASSET_TYPE)
CREATE UNIQUE INDEX AATABLE_AMS_MASTER_UIX ON AATABLE_AMS_MASTER(ASSET_ID, ASSET_HIST_TYPE)

GO


IF EXISTS (SELECT * FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME = N'AATABLE_AMS_ATTRIBUTE')
BEGIN
DROP TABLE AATABLE_AMS_ATTRIBUTE
END
GO

CREATE TABLE AATABLE_AMS_ATTRIBUTE(
ASSET_ID                VARCHAR(65)     NOT NULL,
ASSET_HIST_TYPE         VARCHAR(100)    NOT NULL,   -- Historical Asset type
ASSET_ATTRIB_TEMP_NAME  VARCHAR(30)     NOT NULL,
ASSET_ATTRIB_NAME       VARCHAR(30)     NOT NULL,
ASSET_ATTRIB_VALUE      VARCHAR(2000),
IS_HIDDEN				VARCHAR(1)
)
GO

/* ***** Translation Tables List ***** 
Asset Attribute Translation Table
*/

ALTER TABLE AATABLE_AMS_ATTRIBUTE ADD CONSTRAINT AATABLE_AMS_ATTRIBUTE_PK PRIMARY KEY (ASSET_ID, ASSET_HIST_TYPE, ASSET_ATTRIB_NAME)
CREATE UNIQUE INDEX AATABLE_AMS_ATTRIBUTE_UIX ON AATABLE_AMS_ATTRIBUTE(asset_id, asset_hist_type)

GO


IF EXISTS (SELECT * FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME = N'AATABLE_AMS_ATTRIBUTE_TABLE')
BEGIN
DROP TABLE AATABLE_AMS_ATTRIBUTE_TABLE
END
GO

CREATE TABLE AATABLE_AMS_ATTRIBUTE_TABLE(
ASSET_ID                VARCHAR(65)   NOT NULL,
ASSET_HIST_TYPE         VARCHAR(100)  NOT NULL,   -- Historical Asset type
ASSET_ATTRIB_TAB_NAME 	VARCHAR(30)   NOT NULL,
ASSET_ATTRIB_NAME       VARCHAR(30)   NOT NULL,
ATTRIB_ROW_INDEX		    NUMERIC(5)    NOT NULL, 
ASSET_ATTRIB_VALUE      VARCHAR(2000)
)
GO

/* ***** Translation Tables List ***** 

Asset Attribute Table Translation Table

*/
CREATE UNIQUE INDEX AATABLE_AMS_ATTRIBUTE_TABLE_UIX ON AATABLE_AMS_ATTRIBUTE_TABLE(ASSET_ID, ASSET_HIST_TYPE ,ASSET_ATTRIB_TAB_NAME, ASSET_ATTRIB_NAME, ATTRIB_ROW_INDEX)
GO


IF EXISTS (SELECT * FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME = N'AATABLE_AMS_ASSET_ASSET')
BEGIN
DROP TABLE AATABLE_AMS_ASSET_ASSET
END
GO

CREATE TABLE AATABLE_AMS_ASSET_ASSET(
PARENT_ASSET_ID         VARCHAR(65)     NOT NULL,
PARENT_ASSET_HIST_TYPE  VARCHAR(100)    NOT NULL,   -- Historical Asset type
CHILD_ASSET_ID          VARCHAR(65)     NOT NULL,
CHILD_ASSET_HIST_TYPE   VARCHAR(100)    NOT NULL   -- Historical Asset type
)
GO

ALTER TABLE AATABLE_AMS_ASSET_ASSET ADD CONSTRAINT AATABLE_AMS_ASSET_ASSET_PK  PRIMARY KEY (PARENT_ASSET_ID, PARENT_ASSET_HIST_TYPE, CHILD_ASSET_ID, CHILD_ASSET_HIST_TYPE )
GO



IF EXISTS (SELECT * FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME = N'AATABLE_REFER_PEOPLE_LINKS')
BEGIN
DROP TABLE AATABLE_REFER_PEOPLE_LINKS
END
GO

CREATE TABLE AATABLE_REFER_PEOPLE_LINKS(
CONTACT_NBR NUMERIC(22) NOT NULL,
ENT_TYPE VARCHAR(50),
ENT_ID1 VARCHAR(100),
ENT_ID2 VARCHAR(255) ,
ENT_ID3 VARCHAR(255),
PRIMARY_FLAG varchar(10),
comments varchar(2000),
START_DATE DATETIME,
END_DATE DATETIME
)
GO
IF EXISTS (SELECT name  FROM sysobjects WHERE type = 'U' AND name = 'AATABLE_LIC_PROF' )
BEGIN
     DROP  Table  AATABLE_LIC_PROF
END

CREATE TABLE AATABLE_LIC_PROF (
serv_prov_code          varchar(15)  not null,
lic_nbr                 varchar(30)  not null,
lic_status              varchar(1)   not null,
lic_state               varchar(2)   not null,
tt_lic_type                varchar(255) not null,
bus_name                varchar(255) not null,
lic_orig_iss_dd         datetime,
last_renewal_dd         datetime,
lic_expir_dd            datetime,
cae_fname               varchar(70), 
cae_mname               varchar(70),
cae_lname               varchar(70),
address1                varchar(200),
address2                varchar(200),
city                    varchar(32),
state                   varchar(2),
zip			                varchar(10),
phone1			            varchar(40),
phone2			            varchar(40),
fax			                varchar(40),
email			              varchar(70),
lic_comment		          varchar(2000),
ins_co_name		          varchar(65),
ins_amount		          numeric(12,2),
ins_policy_no		        varchar(30),
ins_exp_dt		          datetime,
bus_lic			            varchar(15),
bus_lic_exp_dt		      datetime,
last_update_dd		      datetime,			-- not used at this time
lic_seq_nbr		          numeric,
rec_date		            datetime ,
rec_ful_nam		          varchar(70),
rec_flag		            varchar(1),
lic_board 	            varchar(255),
address3                varchar(200),
wc_exempt               varchar(1),
wc_policy_no            varchar(30),
wc_eff_dt               datetime,
wc_exp_dt               datetime,
wc_canc_dt              datetime,
suffix_name             varchar(10),
country                 varchar(30),
county_code             varchar(2),   
wc_ins_co_code          varchar(3),   
contr_lic_no            numeric,
cont_lic_bus_name       varchar(255),
ga_ivr_pin              numeric,
l1_salutation	          varchar(255),		
l1_gender	              varchar(1),		
l1_post_office_box      varchar(30),		
bus_name2               varchar(255),		
l1_birth_date           datetime,
phone1_country_code     varchar(3),
phone2_country_code     varchar(3),
fax_country_code        varchar(3),	
lic_type_flag                 varchar(20),
lic_social_security_nbr       varchar(11),	
lic_federal_employer_id_nbr   varchar(16),	
phone3                        varchar(40),	
phone3_country_code           varchar(3),	
aca_permission                varchar(1),		
l1_title                      varchar(255),		
past_days                     numeric
 );
go

  Create unique clustered index AATABLE_LIC_PROF01 on AATABLE_LIC_PROF (Serv_prov_code,Lic_nbr,tt_lic_type)
go

-- licensed professional attributes staging table

      IF EXISTS (SELECT name  FROM sysobjects WHERE type = 'U' AND name = 'AATABLE_LIC_PROF_ATTR' )
	  BEGIN
            DROP  Table  AATABLE_LIC_PROF_ATTR
	  END
go

Create table AATABLE_LIC_PROF_ATTR(
serv_prov_code          varchar(15) not null,
lic_nbr                 varchar(30) not null,
lic_type                varchar(255) not null,
attrib_temp_name        varchar(30) not null,
attrib_name             varchar(30) not null,
attrib_value            varchar(200) not null
 );
go

 create unique clustered index AATABLE_LIC_PROF_ATTR01 on AATABLE_LIC_PROF_ATTR(serv_prov_code, lic_nbr, lic_type, attrib_name)
go

-- TABLE LICENSED PROFESSIONAL ATTACHED TABLES
-- (all fields required for input to be processed)

      IF EXISTS (SELECT name  FROM sysobjects WHERE type = 'U' AND name = 'AATABLE_LIC_PROF_ATTACH' )
	  BEGIN
            DROP  Table  AATABLE_LIC_PROF_ATTACH
	  END
go

Create table AATABLE_LIC_PROF_ATTACH(
serv_prov_code		    varchar(15) not null,	--serv_prov_code to be processed
lic_nbr			        varchar(30) not null,	--license number
lic_type		        varchar(255) not null,
group_name		        varchar(12) not null,	--validated against r2chckbox.r1_checkbox_code
table_name		        varchar(30) not null,	--validated against r2chckbox.r1_checkbox_type
column_name		        varchar(100) not null,	--validated against r2chckbox.r1_checkbox_desc
row_num			        numeric not null,	--row number which provided field belongs to in the mapped attached table
attach_value		    varchar(240) not null	--input data value, must match expected data type or error will occur in app
 );
go

 create unique clustered index AATABLE_LIC_PROF_ATTACH01 on AATABLE_LIC_PROF_ATTACH(serv_prov_code, lic_nbr, lic_type, table_name, row_num, column_name)
go

-- AATABLE_TEMPLATE_ASI
IF EXISTS (SELECT name  FROM sysobjects WHERE type = 'U' AND name = 'AATABLE_TEMPLATE_ASI' )
BEGIN
	DROP  Table  AATABLE_TEMPLATE_ASI
END
go

Create table AATABLE_TEMPLATE_ASI(
ENTITY_TYPE 		    numeric not null,
ENTITY_ID 			    numeric not null,
GROUP_CODE 		        varchar(12) not null,
ASI_SUB_GROUP_CODE  	varchar(30) not null,
FIELD_NAME 		        varchar(100) not null,
FIELD_VALUE 		    varchar(4000) not null
 );
go

create unique clustered index AATABLE_TEMP_ASI_UIX on AATABLE_TEMPLATE_ASI(ENTITY_TYPE, ENTITY_ID,GROUP_CODE, ASI_SUB_GROUP_CODE, FIELD_NAME)
go

-- AATABLE_TEMPLATE_ASIT
IF EXISTS (SELECT name  FROM sysobjects WHERE type = 'U' AND name = 'AATABLE_TEMPLATE_ASIT' )
BEGIN
	DROP  Table  AATABLE_TEMPLATE_ASIT
END
go

Create table AATABLE_TEMPLATE_ASIT(
ENTITY_TYPE  		    numeric not null,
ENTITY_ID  			    numeric not null,
GROUP_CODE  		        varchar(12) not null,
ASI_SUB_GROUP_CODE    	varchar(30) not null,
FIELD_NAME  		        varchar(100) not null,
FIELD_VALUE  		    varchar(4000) not null,
ROW_INDEX 				numeric  not null 
 );
go

create unique clustered index AATABLE_TEMP_ASIT_UIX  on AATABLE_TEMPLATE_ASIT(ENTITY_TYPE, ENTITY_ID,GROUP_CODE, ASI_SUB_GROUP_CODE, FIELD_NAME,ROW_INDEX)
go

-- AATABLE_PERMIT_PAYMENTS
IF EXISTS (SELECT name  FROM sysobjects WHERE type = 'U' AND name = 'AATABLE_PERMIT_PAYMENTS' )
BEGIN
	DROP  Table  AATABLE_PERMIT_PAYMENTS
END
go

CREATE TABLE AATABLE_PERMIT_PAYMENTS (
PERMITNUM VARCHAR(30) NOT NULL,
PAY_KEY  VARCHAR(255) NOT NULL ,
PAYMENT_METHOD                                     VARCHAR(30) not null ,
PAYMENT_REF_NBR                                    VARCHAR(70 ),
CC_TYPE                                            VARCHAR(30 ),
PAYEE                                              VARCHAR(600 ),
PAYMENT_DATE                                       DATE  not null ,
PAYMENT_AMOUNT                                     NUMERIC(15,2) not null ,
TRANSACTION_CODE                                   VARCHAR(50 ),
TRANSACTION_NBR                                    VARCHAR(30 ),
PAYMENT_COMMENT                                    VARCHAR(2000 ),
CASHIER_ID                                         VARCHAR(70) default 'AA CONV'   ,
REGISTER_NBR                                       VARCHAR(8),
REC_DATE                                           DATE NOT NULL,
REC_FUL_NAM                                        VARCHAR(70 ) NOT NULL,
ACCT_ID                                            VARCHAR(15 ),
PAYEE_ADDRESS                                      VARCHAR(700 ),
PAYEE_PHONE                                        VARCHAR(240 ),
CC_AUTH_CODE                                       VARCHAR(30 ),
PAYEE_PHONE_IDD                                    VARCHAR(3 ),
PAYMENT_RECEIVED_CHANNEL                           VARCHAR(30 ),
CHECK_NUMBER                                       VARCHAR(30 ),
CHECK_TYPE                                         VARCHAR(100 ),
DRIVER_LICENSE                                     VARCHAR(100 ),
CHECK_HOLDER_NAME                                  VARCHAR(255 ),
CHECK_HOLDER_EMAIL                                 VARCHAR(80 ),
PHONE_NUMBER                                       VARCHAR(40 ),
COUNTRY                                            VARCHAR(30 ),
STATE                                              VARCHAR(30 ),
CITY                                               VARCHAR(30 ),
STREET                                             VARCHAR(240 ),
ZIP                                                VARCHAR(10 ),
REASON                                             VARCHAR(300 ),
PAYEE_TYPE                                         VARCHAR(255),
HIST_RECEIPT_NBR                                   VARCHAR(30), 
VOID_BY                                            VARCHAR(70),
VOID_DATE                                          DATE,
payment_pay_key                                    VARCHAR(255)
) ;
go

ALTER TABLE AATABLE_PERMIT_PAYMENTS ADD CONSTRAINT AATBL_PERMIT_PAYMENTS_PK PRIMARY KEY  (PERMITNUM, PAY_KEY) ;
go

-- AATABLE_PERMIT_RECEIPTS
IF EXISTS (SELECT name  FROM sysobjects WHERE type = 'U' AND name = 'AATABLE_PERMIT_RECEIPTS' )
BEGIN
	DROP  Table  AATABLE_PERMIT_RECEIPTS
END
go

CREATE TABLE  AATABLE_PERMIT_RECEIPTS (
HIST_RECEIPT_NBR  VARCHAR(30) not null ,
RECEIPT_DATE                              DATE NOT NULL ,
CASHIER_ID                                VARCHAR(70 ) NOT NULL ,
REGISTER_NBR                              VARCHAR(8 ),
RECEIPT_AMOUNT                            NUMERIC(15,2) not null ,
RECEIPT_COMMENT                           VARCHAR(800 ),
RECEIPT_STATUS                            VARCHAR(30 ),
TRANSACTION_CODE                          VARCHAR(50 ),
TRANSACTION_NBR                           VARCHAR(30 ),
REC_DATE                                   DATE NOT NULL ,
REC_FUL_NAM                                VARCHAR(70 ) NOT NULL,
TTERMINAL_ID                               VARCHAR(10 ),
WORKSTATION_ID                             VARCHAR(70 )
) ;

CREATE UNIQUE INDEX AATBL_PRMT_RCTS_idx1 ON AATABLE_PERMIT_RECEIPTS(HIST_RECEIPT_NBR);
go